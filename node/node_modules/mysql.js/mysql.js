var SQL=require("mysql");
var sqlstr=require("sqlstring");
var mysql=function(host,user,pswd,db){
	this.conn=null;
	this.table="";
let conf={
  host: host,
  user: user,
  password: pswd,
  database: db
};
this.isAlive=()=>{
	return this.alive;
}
this.ConnectionKeeper=()=>{
	if(!this.alive)
		this.connect().then(()=>{});
	else
		setTimeout(this.ConnectionKeeper,1000);

}
this.connect=()=>{ 
return new Promise((yes,no)=>{
	if(this.conn==null)return;
	this.conn.connect((err)=>{
	if(err){
		console.log(err);
		this.alive=false;
		yes(false);
		return;
	}
	this.alive=true;
	yes(true);
	this.ConnectionKeeper();
}


);
});

}

this.alive=false;
this.conn=SQL.createConnection(conf);
this.query=(sql)=>{
	return new Promise((yes,no)=>{
	this.conn.query(sql,(err,res,fields)=>{
		if(err){no(err);return;}
		if(res.length==1)
			yes(res[0],fields);
		else
		yes(res,fields);
	});});

this.conn.on("exit",()=>{
	this.alive=false;
});
this.ConnectionKeeper();

}
this.setTable=(table)=>{
	this.table=table;
}
function isAvaliable(obj){
	return !isEmpty(obj) && !isNull(obj);
}
function isEmpty(obj) {
 for (var key in obj) {
  return false;
 }
 return true;
}
function isNull(obj){
  for(var i in obj){
    if(obj.hasOwnProperty(i)){
      return false;
    }
  }
  return true;
}


this.select=(filter,which,limits,table)=>{
	return new Promise((yes,no)=>{
		let from=table;
if(table==null)if(this.table==""){no("Error: set a default table firstly or input the table parameter.");return;}else from=this.table;
 
	
let whi="*";
if(isAvaliable(which)){
	whi="";
	for(i in which)
		whi+= sqlstr.escape(which[i]) +",";//sqlstring
	whi=whi.substring(0,whi.length-1);

}

let whe="1";
if(isAvaliable(filter))
{
	whe="";
	for(i in filter)
		whe+=i+" = "+sqlstr.escape(filter[i])+" AND";//sqlstring
	whe=whe.substring(0,whe.length-3);
}
let lim="0,-1";
if(limits != null)
	lim=limits+"";

let sql="SELECT "+whi+" FROM "+from+" WHERE "+whe+" LIMIT "+lim+";";
	this.query(sql).then(yes,no);
});


};
this.getOne=(filter,which,table)=>{
	return this.select(filter,which,1,table);
};
this.gets=this.select;
this.delete=(filter,limits,table)=>{
	return new Promise((yes,no)=>{
		let from=table;
if(table==null)if(this.table==""){no("Error: set a default table firstly or input the table parameter.");return;}else from=this.table;


let whe="1";
if(isAvaliable(filter))
{
	whe="";
	for(i in filter)
		whe+=i+" = "+sqlstr.escape(filter[i])+" AND";//sqlstring
	whe=whe.substring(0,whe.length-3);
}
let lim="1";
if(limits != null)
	lim=limits+"";

let sql="DELETE FROM "+from+" WHERE "+whe+" LIMIT "+lim+";";
	this.query(sql).then((fields)=>{
		yes(fields.affectedRows);
	},no);
});



}
this.deleteAll=(filter,table)=>{
	this.delete(filter,"0,-1",table);
}
this.del=this.delete;
this.delOne=this.delete;
this.deleteOne=this.delete;

this.insert=function(arr,table){  
return new Promise((yes,no)=>{
		let from=table;
if(table==null)if(this.table==""){no("Error: set a default table firstly or input the table parameter.");return;}else from=this.table;

let values="";
for(let i=0;i<arr.length;i++)
	if(arr[i]==null)
		values+="NULL,";
	else
	values+=sqlstr.escape(arr[i])+",";

values=values.substring(0,values.length-1);
let sql="INSERT INTO "+from+" VALUE("+values+");";
	this.query(sql).then((fields)=>{

		yes(fields.affectedRows);
	},no);
});
	}
this.addIn=function(table){
	let arr=[];
for(var i = 1;i < arguments.length; i++) { 
        arr.push(arguments[i]); 
    }
	return this.insert(arr,table);
}
this.add=function(){
		let arr=[];
for(var i = 0;i < arguments.length; i++) { 

        arr.push(arguments[i]); 
    }
	return this.insert(arr);
}


}

module.exports = mysql;
